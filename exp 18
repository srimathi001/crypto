#include <stdio.h>
#include <stdint.h>

#define NUM_SUBKEYS 16
#define KEY_SIZE 56

// Permuted Choice 1 (PC1) - 64-bit key to 56 bits
int PC1[] = {
    57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22,
    14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4
};

// Permuted Choice 2 (PC2) - 56-bit key halves to 48 bits
int PC2[] = {
    14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48,
    44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32
};

// Shift schedule for key generation
int SHIFTS[] = {1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1};

// Function to apply a left circular shift
uint32_t left_shift(uint32_t half, int shifts) {
    return ((half << shifts) | (half >> (28 - shifts))) & 0x0FFFFFFF;
}

// Function to generate 16 subkeys
void generate_subkeys(uint64_t initial_key, uint64_t subkeys[NUM_SUBKEYS]) {
    uint64_t permuted_key = 0;
    uint32_t C = 0, D = 0;

    // Apply PC1 to reduce the key to 56 bits
    for (int i = 0; i < KEY_SIZE; i++) {
        permuted_key <<= 1;
        permuted_key |= (initial_key >> (64 - PC1[i])) & 1;
    }

    // Split the permuted key into two halves (C and D)
    C = (permuted_key >> 28) & 0x0FFFFFFF; // Left 28 bits
    D = permuted_key & 0x0FFFFFFF;        // Right 28 bits

    // Generate subkeys
    for (int round = 0; round < NUM_SUBKEYS; round++) {
        // Perform left circular shifts
        C = left_shift(C, SHIFTS[round]);
        D = left_shift(D, SHIFTS[round]);

        // Combine halves and apply PC2
        uint64_t combined_key = ((uint64_t)C << 28) | D;
        subkeys[round] = 0;

        for (int j = 0; j < 48; j++) {
            subkeys[round] <<= 1;
            subkeys[round] |= (combined_key >> (56 - PC2[j])) & 1;
        }

        // Ensure first 24 bits come from C, second 24 from D
        uint64_t C_part = (subkeys[round] >> 24) & 0xFFFFFF; // Extract top 24 bits
        uint64_t D_part = subkeys[round] & 0xFFFFFF;         // Extract lower 24 bits

        printf("Subkey %2d: C_part = %06lX, D_part = %06lX\n", round + 1, C_part, D_part);
    }
}

int main() {
    uint64_t initial_key = 0x133457799BBCDFF1; // Example initial key
    uint64_t subkeys[NUM_SUBKEYS];

    // Generate subkeys
    generate_subkeys(initial_key, subkeys);

    // Display all subkeys
    for (int i = 0; i < NUM_SUBKEYS; i++) {
        printf("Subkey %2d: %012lX\n", i + 1, subkeys[i]);
    }

    return 0;
}
