#include <stdio.h>

// Function to compute the greatest common divisor (GCD) using the Euclidean algorithm
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Extended Euclidean algorithm to find modular inverse
int mod_inverse(int e, int phi_n) {
    int t = 0, new_t = 1;
    int r = phi_n, new_r = e;

    while (new_r != 0) {
        int quotient = r / new_r;
        int temp_t = t;
        t = new_t;
        new_t = temp_t - quotient * new_t;

        int temp_r = r;
        r = new_r;
        new_r = temp_r - quotient * new_r;
    }

    if (r > 1) {
        printf("e is not invertible modulo phi_n.\n");
        return -1;
    }

    if (t < 0) {
        t += phi_n;
    }
    return t;
}

int main() {
    int n = 3599;      // Example: n = p * q
    int e = 31;        // Public key
    int m = 118;       // A plaintext block known to share a factor with n

    // Step 1: Compute gcd(m, n)
    int p = gcd(m, n);
    if (p <= 1 || p == n) {
        printf("No useful common factor found.\n");
        return 1;
    }

    // Step 2: Determine q
    int q = n / p;
    printf("Factors of n: p = %d, q = %d\n", p, q);

    // Step 3: Compute phi(n)
    int phi_n = (p - 1) * (q - 1);
    printf("phi(n) = %d\n", phi_n);

    // Step 4: Compute the private key (modular inverse of e modulo phi(n))
    int d = mod_inverse(e, phi_n);
    if (d == -1) {
        printf("Failed to compute the private key.\n");
        return 1;
    }

    printf("The private key d = %d\n", d);

    return 0;
}
