#include <openssl/des.h>
#include <stdio.h>
#include <string.h>

#define BLOCK_SIZE 8 // DES block size in bytes

// Function to encrypt data using 3DES in CBC mode
void encrypt_3des_cbc(const unsigned char *plaintext, int plaintext_len, 
                      const unsigned char *key, const unsigned char *iv, 
                      unsigned char *ciphertext) {
    DES_cblock key1, key2, key3;
    DES_key_schedule ks1, ks2, ks3;

    // Split the 24-byte key into three 8-byte keys
    memcpy(key1, key, 8);
    memcpy(key2, key + 8, 8);
    memcpy(key3, key + 16, 8);

    // Set up the key schedules
    DES_set_key_unchecked(&key1, &ks1);
    DES_set_key_unchecked(&key2, &ks2);
    DES_set_key_unchecked(&key3, &ks3);

    DES_cblock iv_block;
    memcpy(iv_block, iv, BLOCK_SIZE);

    // Perform encryption
    DES_ede3_cbc_encrypt(plaintext, ciphertext, plaintext_len, 
                         &ks1, &ks2, &ks3, &iv_block, DES_ENCRYPT);
}

// Function to decrypt data using 3DES in CBC mode
void decrypt_3des_cbc(const unsigned char *ciphertext, int ciphertext_len, 
                      const unsigned char *key, const unsigned char *iv, 
                      unsigned char *plaintext) {
    DES_cblock key1, key2, key3;
    DES_key_schedule ks1, ks2, ks3;

    // Split the 24-byte key into three 8-byte keys
    memcpy(key1, key, 8);
    memcpy(key2, key + 8, 8);
    memcpy(key3, key + 16, 8);

    // Set up the key schedules
    DES_set_key_unchecked(&key1, &ks1);
    DES_set_key_unchecked(&key2, &ks2);
    DES_set_key_unchecked(&key3, &ks3);

    DES_cblock iv_block;
    memcpy(iv_block, iv, BLOCK_SIZE);

    // Perform decryption
    DES_ede3_cbc_encrypt(ciphertext, plaintext, ciphertext_len, 
                         &ks1, &ks2, &ks3, &iv_block, DES_DECRYPT);
}

int main() {
    // Sample data
    unsigned char plaintext[] = "This is a secret message.";
    unsigned char key[24] = "123456789012345678901234"; // 24-byte key for 3DES
    unsigned char iv[BLOCK_SIZE] = "12345678";          // Initialization vector (8 bytes)
    unsigned char ciphertext[BLOCK_SIZE * ((sizeof(plaintext) / BLOCK_SIZE) + 1)];
    unsigned char decrypted[sizeof(plaintext)];

    // Encrypt the plaintext
    encrypt_3des_cbc(plaintext, sizeof(plaintext), key, iv, ciphertext);

    printf("Encrypted text:\n");
    for (int i = 0; i < sizeof(ciphertext); i++) {
        printf("%02x", ciphertext[i]);
    }
    printf("\n");

    // Decrypt the ciphertext
    decrypt_3des_cbc(ciphertext, sizeof(ciphertext), key, iv, decrypted);

    printf("Decrypted text:\n%s\n", decrypted);

    return 0;
}
