#include <stdio.h>
#include <math.h>

// Function to compute modular exponentiation: (base^exp) % mod
long long modular_exponentiation(long long base, long long exp, long long mod) {
    long long result = 1;
    base = base % mod;

    while (exp > 0) {
        if (exp % 2 == 1) {
            result = (result * base) % mod;
        }
        exp = exp >> 1;
        base = (base * base) % mod;
    }

    return result;
}

int main() {
    long long q = 23;  // A prime modulus (publicly agreed)
    long long a = 5;   // A primitive root (publicly agreed)

    // Alice's private key (secret number)
    long long x_A = 6;
    // Bob's private key (secret number)
    long long x_B = 15;

    // Alice computes A = a^x_A mod q and sends A to Bob
    long long A = modular_exponentiation(a, x_A, q);

    // Bob computes B = a^x_B mod q and sends B to Alice
    long long B = modular_exponentiation(a, x_B, q);

    // Alice computes the shared secret S_A = B^x_A mod q
    long long S_A = modular_exponentiation(B, x_A, q);

    // Bob computes the shared secret S_B = A^x_B mod q
    long long S_B = modular_exponentiation(A, x_B, q);

    printf("Public parameters: q = %lld, a = %lld\n", q, a);
    printf("Alice's private key: x_A = %lld\n", x_A);
    printf("Bob's private key: x_B = %lld\n", x_B);
    printf("Alice sends A = %lld to Bob\n", A);
    printf("Bob sends B = %lld to Alice\n", B);
    printf("Alice computes the shared secret: S_A = %lld\n", S_A);
    printf("Bob computes the shared secret: S_B = %lld\n", S_B);

    // If both secrets match, the exchange was successful
    if (S_A == S_B) {
        printf("The shared secret key is successfully established: %lld\n", S_A);
    } else {
        printf("Error: The shared secrets do not match.\n");
    }

    return 0;
}
