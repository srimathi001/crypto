#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define ALPHABET_SIZE 26

// Frequency of letters in English (approximation)
double english_freq[ALPHABET_SIZE] = {
    12.70, 9.06, 8.17, 7.51, 6.97, 6.75, 6.33, 6.09, 5.99, 4.25, 4.03, 
    2.78, 2.36, 2.23, 2.02, 1.93, 1.29, 1.00, 0.99, 0.77, 0.15, 0.15, 
    0.15, 0.10, 0.07, 0.03
};

// Function to calculate letter frequencies in the ciphertext
void calculate_frequencies(const char *ciphertext, double *freq) {
    int count[ALPHABET_SIZE] = {0};
    int total = 0;

    // Count occurrences of each letter
    for (int i = 0; ciphertext[i]; i++) {
        if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            count[ciphertext[i] - 'a']++;
            total++;
        } else if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            count[ciphertext[i] - 'A']++;
            total++;
        }
    }

    // Calculate relative frequencies
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        freq[i] = (double)count[i] / total * 100.0;
    }
}

// Function to sort letters by frequency
void rank_letters_by_frequency(const double *freq, int *rank) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        rank[i] = i; // Initialize with letter index
    }

    // Sort using a simple bubble sort
    for (int i = 0; i < ALPHABET_SIZE - 1; i++) {
        for (int j = 0; j < ALPHABET_SIZE - i - 1; j++) {
            if (freq[rank[j]] < freq[rank[j + 1]]) {
                int temp = rank[j];
                rank[j] = rank[j + 1];
                rank[j + 1] = temp;
            }
        }
    }
}

// Function to decrypt using a substitution mapping
void decrypt_with_mapping(const char *ciphertext, const char *mapping, char *plaintext) {
    for (int i = 0; ciphertext[i]; i++) {
        if (ciphertext[i] >= 'a' && ciphertext[i] <= 'z') {
            plaintext[i] = mapping[ciphertext[i] - 'a'];
        } else if (ciphertext[i] >= 'A' && ciphertext[i] <= 'Z') {
            plaintext[i] = mapping[ciphertext[i] - 'A'] - 32; // Convert to uppercase
        } else {
            plaintext[i] = ciphertext[i]; // Non-alphabetic characters remain unchanged
        }
    }
    plaintext[strlen(ciphertext)] = '\0';
}

// Function to find the top N possible plaintexts
void find_top_plaintexts(const char *ciphertext, int top_n) {
    double freq[ALPHABET_SIZE];
    int rank[ALPHABET_SIZE];
    char plaintext[1024];
    char mapping[ALPHABET_SIZE];

    // Calculate letter frequencies in the ciphertext
    calculate_frequencies(ciphertext, freq);

    // Rank letters by frequency
    rank_letters_by_frequency(freq, rank);

    // Display the top N possible plaintexts
    printf("Top %d possible plaintexts:\n", top_n);
    for (int i = 0; i < top_n; i++) {
        // Generate a substitution mapping
        for (int j = 0; j < ALPHABET_SIZE; j++) {
            mapping[rank[j]] = 'a' + (j + i) % ALPHABET_SIZE; // Shift mapping for diversity
        }

        // Decrypt using the mapping
        decrypt_with_mapping(ciphertext, mapping, plaintext);

        // Display the result
        printf("Mapping #%d: %s\n", i + 1, plaintext);
    }
}

int main() {
    char ciphertext[] = "wklv lv d whvw phvvdjh"; // Example ciphertext

    int top_n = 10; // Number of plaintexts to display

    // Perform frequency analysis and display results
    find_top_plaintexts(ciphertext, top_n);

    return 0;
}
