#include <stdio.h>
#include <math.h>
unsigned long long factorial(int n) {
    unsigned long long result = 1;
    for (int i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}


double log2_factorial(int n) {
    double log2_result = 0;
    for (int i = 2; i <= n; i++) {
        log2_result += log2(i);
    }
    return log2_result;
}

int main() {
    int grid_size = 25; 
    

    unsigned long long total_permutations = factorial(grid_size);
    double log2_keys = log2_factorial(grid_size);


    double unique_key_factor = 4.0 * 5.0; 
    double unique_log2_keys = log2_keys - log2(unique_key_factor);

    printf("Total possible keys (ignoring equivalences): 2^%.2f\n", log2_keys);
    printf("Effectively unique keys (considering equivalences): 2^%.2f\n", unique_log2_keys);

    return 0;
}
