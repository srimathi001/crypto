#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>
#include <time.h>

// Constants
#define ROWS 5
#define COLS 5
#define LANE_SIZE 64 // Each lane is 64 bits
#define CAPACITY_LANES 10 // Last 10 lanes are capacity (50% for SHA-3)

// Function to generate random 64-bit values
uint64_t random_lane() {
    return ((uint64_t)rand() << 32) | rand();
}

int main() {
    // Initialize state matrix (5x5 lanes of 64 bits)
    uint64_t state[ROWS][COLS] = {0};

    // Mark capacity lanes as zeros initially
    for (int i = 0; i < CAPACITY_LANES; i++) {
        int row = (ROWS * COLS - 1 - i) / COLS;
        int col = (ROWS * COLS - 1 - i) % COLS;
        state[row][col] = 0;
    }

    // Initialize random seed
    srand(time(NULL));

    int rounds = 0; // Count the number of rounds
    while (1) {
        // Create a new message block P0 with at least one nonzero bit per lane
        uint64_t P[ROWS][COLS];
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                P[i][j] = random_lane();
            }
        }

        // XOR the message block into the state
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                state[i][j] ^= P[i][j];
            }
        }

        // Check if all capacity lanes have at least one nonzero bit
        int all_nonzero = 1;
        for (int i = 0; i < CAPACITY_LANES; i++) {
            int row = (ROWS * COLS - 1 - i) / COLS;
            int col = (ROWS * COLS - 1 - i) % COLS;
            if (state[row][col] == 0) {
                all_nonzero = 0;
                break;
            }
        }

        rounds++;

        if (all_nonzero) {
            break;
        }
    }

    printf("Number of rounds until all capacity lanes have at least one nonzero bit: %d\n", rounds);

    return 0;
}
